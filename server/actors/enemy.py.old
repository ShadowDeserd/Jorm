from actors.actor import Actor
import random
import copy
from configuration.config import StatType, ItemType, ENEMIES, NPCS, ITEMS
from items.manager import load_item
from configuration.config import ITEMS
from quest import ObjectiveCountProposal, OBJECTIVE_TYPES
from actors.ai import EnemyAI

'''
def create_enemy(room, npc_id, spawn_for_lore = False):
    if npc_id not in ENEMIES:
        print(f'error creating enemy: {npc_id}')
        return

    enemy = ENEMIES[npc_id]
    name = ''
    if not spawn_for_lore:
        names = 'Redpot Kuro Christine Adne Ken Thomas Sandra Erling Viktor Wiktor Sam Dan Arr\'zTh-The\'RchEndrough'
        name = random.choice(names.split())
        name = name + ' The ' + enemy['name']
    else:
        name = enemy['name']
    stats = enemy['stats']
    skills = enemy['skills']
    #combat_loop = enemy['combat_loop']
    _loot = enemy['loot']
    loot = _loot
    description = enemy['description']
    #print(enemy['name'],LOOT[_loot],'XD')

        

    for item in loot.keys():
        #print(loot)
        if item not in ITEMS:
            print(item, 'does not exist in loot table for ', npc_id)
    e = Enemy(npc_id, name, description, room, stats, loot, skills)

    return e
'''

class Enemy(Actor):
    def __init__(
        self, 
        npc_id = None, 
        ai = None,
        name = None,
        description = None, 
        room = None, 
        stats = None, 
        loot = None, 
        skills = None,
        dialog_tree = None
    ):
        super().__init__(
            name = name, 
            ai = ai,
            description = description, 
            room = room,
            dialog_tree = dialog_tree
        )

        self.npc_id = npc_id
        

        

        if stats != None:
            self.stat_manager.stats = {**self.stat_manager.stats, **stats}
            self.stat_manager.stats[StatType.HPMAX] = self.stat_manager.stats[StatType.HP]
            self.stat_manager.stats[StatType.MPMAX] = self.stat_manager.stats[StatType.MP]

        if loot != None:
            self.loot = copy.deepcopy(loot)
        else:
            self.loot = {}

        if skills != None:
            self.skill_manager.skills = copy.deepcopy(skills)

        #self.ai = EnemyAI(self)


    def sendLine(self, line):
        print(f'sendLine called in a enemy function? line: {line}')

    def tick(self):
        super().tick()
        self.ai.tick()

    def drop_loot_on_ground(self):
        for item in self.loot: 
            roll = random.random()
            if roll >= self.loot[item]:
                continue

            new_item = load_item(item)
            self.simple_broadcast('',f'{new_item.name} hits the ground with a thud.')
            self.room.inventory_manager.add_item(new_item)

    def drop_loot(self,actor):
        all_items = ITEMS
        
        for item in self.loot: 
            roll = random.random()
            if roll >= self.loot[item]:
                continue

            new_item = load_item(item)

            #if new_item.item_type == ItemType.EQUIPMENT:
            #    for i in range(random.randint(0,new_item.stat_manager.reqs[StatType.LVL])):
            #        stat = random.choice([s for s in new_item.stat_manager.stats.keys()])
            #        new_item.stat_manager.stats[stat] = new_item.stat_manager.stats[stat] + 1

            # OLD LOOT THING
            if actor.inventory_manager.add_item(new_item):   
                actor.sendLine(f'You loot {new_item.name}')
            else:
                actor.sendLine(f'Your inventory is full and you missed out on {new_item.name}')

    def die(self):
        
        if self.room == None:
            super().die()
            return
        if self.room.combat == None:
            super().die()
            return
        if self not in self.room.combat.participants.values():
            super().die()
            return
        
        for actor in self.room.combat.participants.values():
            if type(actor).__name__ == "Player":
                actor.stat_manager.stats[StatType.EXP] += self.stat_manager.stats[StatType.EXP]
                #self.drop_loot(actor)
                self.drop_loot_on_ground()
                proposal = ObjectiveCountProposal(OBJECTIVE_TYPES.KILL_X, self.npc_id, 1)
                actor.quest_manager.propose_objective_count_addition(proposal)
                
        super().die()


    def set_turn(self):
        super().set_turn()

    
